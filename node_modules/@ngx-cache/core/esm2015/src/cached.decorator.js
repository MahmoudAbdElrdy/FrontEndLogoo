import { of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
import { CacheService } from './cache.service';
import { ReturnType } from './models/return-type';
import { isObservable, isPromise } from './util';
export function CacheKey(target, propertyKey, index) {
    const metadataKey = `__cache_${propertyKey}_keys`;
    Array.isArray(target[metadataKey]) ? target[metadataKey].push(index) : (target[metadataKey] = [index]);
}
export function Cached(key) {
    return function (target, propertyKey, descriptor) {
        const method = descriptor.value;
        descriptor.value = function (...args) {
            const cache = CacheService.getInstance();
            const metadataKey = `__cache_${propertyKey}_keys`;
            const indices = target[metadataKey];
            let keyParts = '';
            if (Array.isArray(indices)) {
                for (let i = 0; i < args.length; i++) {
                    if (indices.indexOf(i) !== -1) {
                        keyParts = !keyParts ? String(args[i]) : `${keyParts}_${String(args[i])}`;
                    }
                }
            }
            let cacheKey = !keyParts ? key : `${key}_${keyParts}`;
            cacheKey = CacheService.normalizeKey(cacheKey);
            if (!cache || !cacheKey) {
                return method.apply(this, args);
            }
            if (cache.has(cacheKey)) {
                const cached = cache.getWithMetadata(cacheKey);
                if (cached && cached.data) {
                    switch (cached.returnType) {
                        case ReturnType.Observable:
                            return observableOf(cached.data);
                        case ReturnType.Promise:
                            return Promise.resolve(cached.data);
                        default:
                            return cached.data;
                    }
                }
            }
            const value = method.apply(this, args);
            if (isObservable(value)) {
                return value.pipe(map((res) => {
                    cache.set(cacheKey, res, ReturnType.Observable);
                    return res;
                }));
            }
            else if (isPromise(value)) {
                return (value).then((res) => {
                    cache.set(cacheKey, res, ReturnType.Promise);
                    return res;
                });
            }
            cache.set(cacheKey, value);
            return value;
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2FjaGUvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYWNoZWQuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxFQUFFLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2pELE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBVyxFQUFFLFdBQW1CLEVBQUUsS0FBYTtJQUN0RSxNQUFNLFdBQVcsR0FBRyxXQUFXLFdBQVcsT0FBTyxDQUFDO0lBRWxELEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RyxDQUFDO0FBR0QsTUFBTSxVQUFVLE1BQU0sQ0FBQyxHQUFXO0lBRWhDLE9BQU8sVUFBUyxNQUFnQixFQUFFLFdBQW1CLEVBQUUsVUFBd0M7UUFDN0YsTUFBTSxNQUFNLEdBQWEsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUMxQyxVQUFVLENBQUMsS0FBSyxHQUFHLFVBQVMsR0FBRyxJQUFnQjtZQUM3QyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFekMsTUFBTSxXQUFXLEdBQUcsV0FBVyxXQUFXLE9BQU8sQ0FBQztZQUNsRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFcEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBRWxCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDN0IsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3FCQUMzRTtpQkFDRjthQUNGO1lBRUQsSUFBSSxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7WUFFdEQsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFHL0MsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFFdkIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNqQztZQUVELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDdkIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFL0MsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDekIsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFO3dCQUN6QixLQUFLLFVBQVUsQ0FBQyxVQUFVOzRCQUN4QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ25DLEtBQUssVUFBVSxDQUFDLE9BQU87NEJBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3RDOzRCQUNFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztxQkFDdEI7aUJBQ0Y7YUFDRjtZQUdELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRXZDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsR0FBRyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7b0JBQ2YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFFaEQsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDLENBQ0gsQ0FBQzthQUNIO2lCQUFNLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7b0JBQy9CLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBRTdDLE9BQU8sR0FBRyxDQUFDO2dCQUNiLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUzQixPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9jYWNoZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmV0dXJuVHlwZSB9IGZyb20gJy4vbW9kZWxzL3JldHVybi10eXBlJztcclxuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBpc1Byb21pc2UgfSBmcm9tICcuL3V0aWwnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbmV4cG9ydCBmdW5jdGlvbiBDYWNoZUtleSh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gIGNvbnN0IG1ldGFkYXRhS2V5ID0gYF9fY2FjaGVfJHtwcm9wZXJ0eUtleX1fa2V5c2A7XHJcblxyXG4gIEFycmF5LmlzQXJyYXkodGFyZ2V0W21ldGFkYXRhS2V5XSkgPyB0YXJnZXRbbWV0YWRhdGFLZXldLnB1c2goaW5kZXgpIDogKHRhcmdldFttZXRhZGF0YUtleV0gPSBbaW5kZXhdKTtcclxufVxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbmV4cG9ydCBmdW5jdGlvbiBDYWNoZWQoa2V5OiBzdHJpbmcpOiBhbnkgfCBPYnNlcnZhYmxlPGFueT4gfCBQcm9taXNlPGFueT4ge1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IEZ1bmN0aW9uLCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KTogYW55IHwgT2JzZXJ2YWJsZTxhbnk+IHwgUHJvbWlzZTxhbnk+IHtcclxuICAgIGNvbnN0IG1ldGhvZDogRnVuY3Rpb24gPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uKC4uLmFyZ3M6IEFycmF5PGFueT4pOiBhbnkgfCBPYnNlcnZhYmxlPGFueT4gfCBQcm9taXNlPGFueT4ge1xyXG4gICAgICBjb25zdCBjYWNoZSA9IENhY2hlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgY29uc3QgbWV0YWRhdGFLZXkgPSBgX19jYWNoZV8ke3Byb3BlcnR5S2V5fV9rZXlzYDtcclxuICAgICAgY29uc3QgaW5kaWNlcyA9IHRhcmdldFttZXRhZGF0YUtleV07XHJcblxyXG4gICAgICBsZXQga2V5UGFydHMgPSAnJztcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluZGljZXMpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoaW5kaWNlcy5pbmRleE9mKGkpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBrZXlQYXJ0cyA9ICFrZXlQYXJ0cyA/IFN0cmluZyhhcmdzW2ldKSA6IGAke2tleVBhcnRzfV8ke1N0cmluZyhhcmdzW2ldKX1gO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGNhY2hlS2V5ID0gIWtleVBhcnRzID8ga2V5IDogYCR7a2V5fV8ke2tleVBhcnRzfWA7XHJcblxyXG4gICAgICBjYWNoZUtleSA9IENhY2hlU2VydmljZS5ub3JtYWxpemVLZXkoY2FjaGVLZXkpO1xyXG5cclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgIGlmICghY2FjaGUgfHwgIWNhY2hlS2V5KSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNhY2hlLmhhcyhjYWNoZUtleSkpIHtcclxuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXRXaXRoTWV0YWRhdGEoY2FjaGVLZXkpO1xyXG5cclxuICAgICAgICBpZiAoY2FjaGVkICYmIGNhY2hlZC5kYXRhKSB7XHJcbiAgICAgICAgICBzd2l0Y2ggKGNhY2hlZC5yZXR1cm5UeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUmV0dXJuVHlwZS5PYnNlcnZhYmxlOlxyXG4gICAgICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlT2YoY2FjaGVkLmRhdGEpO1xyXG4gICAgICAgICAgICBjYXNlIFJldHVyblR5cGUuUHJvbWlzZTpcclxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlZC5kYXRhKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgY29uc3QgdmFsdWUgPSBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XHJcblxyXG4gICAgICBpZiAoaXNPYnNlcnZhYmxlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5waXBlKFxyXG4gICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHJlcywgUmV0dXJuVHlwZS5PYnNlcnZhYmxlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUpLnRoZW4oKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHJlcywgUmV0dXJuVHlwZS5Qcm9taXNlKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHZhbHVlKTtcclxuXHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XHJcbiAgfTtcclxufVxyXG4iXX0=