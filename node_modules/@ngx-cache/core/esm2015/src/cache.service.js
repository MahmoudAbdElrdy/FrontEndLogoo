import { Inject, Injectable, InjectionToken, Injector, PLATFORM_ID } from '@angular/core';
import { CacheLoader } from './cache.loader';
import { ReturnType } from './models/return-type';
export const CACHE = new InjectionToken('CACHE');
export class CacheService {
    constructor(loader, platformId, injector) {
        this.loader = loader;
        this.platformId = platformId;
        this.injector = injector;
        CacheService.instance = this;
        this.cache = this.injector.get(CACHE);
        this.lifeSpan = loader.lifeSpan;
    }
    static getInstance(loader, platformId, injector) {
        return CacheService.instance;
    }
    static normalizeKey(key) {
        if (CacheService.validateKey(key)) {
            throw new Error('Please provide a valid key to save in the CacheService');
        }
        return `${key}`;
    }
    static validateKey(key) {
        return !key || typeof key === 'boolean' || Number.isNaN(key);
    }
    static validateValue(value) {
        return value.lifeSpan.expiry && value.lifeSpan.expiry > Date.now();
    }
    get key() {
        return this.loader.key;
    }
    has(key) {
        const normalized = CacheService.normalizeKey(key);
        return this.cache.keys.indexOf(normalized) !== -1;
    }
    set(key, value, returnType = ReturnType.Scalar, lifeSpan) {
        const normalized = CacheService.normalizeKey(key);
        return this.cache.setItem(normalized, {
            data: value,
            returnType,
            lifeSpan: this.parseLifeSpan(lifeSpan ? lifeSpan : this.lifeSpan)
        });
    }
    get(key) {
        const normalized = CacheService.normalizeKey(key);
        const cached = this.cache.getItem(normalized);
        if (cached) {
            if (CacheService.validateValue(cached)) {
                return cached.data;
            }
            else {
                this.remove(normalized);
            }
        }
        return undefined;
    }
    getWithMetadata(key) {
        const normalized = CacheService.normalizeKey(key);
        const cached = this.cache.getItem(normalized);
        if (cached) {
            if (CacheService.validateValue(cached)) {
                return cached;
            }
            else {
                this.remove(key);
            }
        }
        return undefined;
    }
    remove(key, wild = false) {
        const normalized = CacheService.normalizeKey(key);
        this.cache.removeItem(normalized, wild);
    }
    clear() {
        this.cache.clear();
    }
    dehydrate() {
        const keys = this.cache.keys.length ? this.cache.keys : [];
        const res = {};
        keys.forEach((key) => {
            res[key] = this.cache.getItem(key);
        });
        return res;
    }
    rehydrate(json) {
        Object.keys(json).forEach((key) => {
            const normalized = CacheService.normalizeKey(key);
            this.cache.setItem(normalized, json[normalized]);
        });
    }
    parseLifeSpan(lifeSpan) {
        return {
            expiry: lifeSpan.expiry || (lifeSpan.TTL ? Date.now() + lifeSpan.TTL * 1000 : this.lifeSpan.expiry),
            TTL: lifeSpan.TTL || this.lifeSpan.TTL
        };
    }
}
CacheService.instance = undefined;
CacheService.decorators = [
    { type: Injectable }
];
CacheService.ctorParameters = () => [
    { type: CacheLoader },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,