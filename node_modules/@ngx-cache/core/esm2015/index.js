import { InjectionToken, Injector, NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CacheLoader, CacheStaticLoader } from './src/cache.loader';
import { CacheService } from './src/cache.service';
export * from './src/cache';
export * from './src/cache.loader';
export * from './src/cache.service';
export * from './src/cached.decorator';
export * from './src/storage';
export const STORAGE = new InjectionToken('STORAGE');
export function cacheFactory() {
    return new CacheStaticLoader();
}
export function cacheServiceFactory(loader, platformId, injector) {
    return new CacheService(loader, platformId, injector);
}
export class CacheModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('CacheModule already loaded; import in root module only.');
        }
    }
    static forRoot(configuredProvider = {
        provide: CacheLoader,
        useFactory: cacheFactory
    }) {
        return {
            ngModule: CacheModule,
            providers: [
                configuredProvider,
                {
                    provide: CacheService,
                    useFactory: cacheServiceFactory,
                    deps: [CacheLoader, PLATFORM_ID, Injector]
                }
            ]
        };
    }
}
CacheModule.decorators = [
    { type: NgModule }
];
CacheModule.ctorParameters = () => [
    { type: CacheModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWNhY2hlL2NvcmUvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpILE9BQU8sRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNbkQsY0FBYyxhQUFhLENBQUM7QUFDNUIsY0FBYyxvQkFBb0IsQ0FBQztBQUNuQyxjQUFjLHFCQUFxQixDQUFDO0FBQ3BDLGNBQWMsd0JBQXdCLENBQUM7QUFDdkMsY0FBYyxlQUFlLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFVLFNBQVMsQ0FBQyxDQUFDO0FBSTlELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFHRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsTUFBbUIsRUFBRSxVQUFlLEVBQUUsUUFBa0I7SUFDMUYsT0FBTyxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFHRCxNQUFNLE9BQU8sV0FBVztJQW9CdEIsWUFBb0MsWUFBMEI7UUFDNUQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQztJQXZCRCxNQUFNLENBQUMsT0FBTyxDQUNaLHFCQUEwQjtRQUN4QixPQUFPLEVBQUUsV0FBVztRQUNwQixVQUFVLEVBQUUsWUFBWTtLQUN6QjtRQUVELE9BQU87WUFDTCxRQUFRLEVBQUUsV0FBVztZQUNyQixTQUFTLEVBQUU7Z0JBQ1Qsa0JBQWtCO2dCQUNsQjtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsVUFBVSxFQUFFLG1CQUFtQjtvQkFDL0IsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7aUJBQzNDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBbkJGLFFBQVE7OztZQXFCNEMsV0FBVyx1QkFBakQsUUFBUSxZQUFJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBDYWNoZUxvYWRlciwgQ2FjaGVTdGF0aWNMb2FkZXIgfSBmcm9tICcuL3NyYy9jYWNoZS5sb2FkZXInO1xyXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL3NyYy9jYWNoZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmFnZSB9IGZyb20gJy4vc3JjL3N0b3JhZ2UnO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvbW9kZWxzL2NhY2hlLXNldHRpbmdzJztcclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvbW9kZWxzL2NhY2hlLXZhbHVlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvbW9kZWxzL2xpZmUtc3Bhbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NhY2hlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2FjaGUubG9hZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2FjaGUuc2VydmljZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NhY2hlZC5kZWNvcmF0b3InO1xyXG5leHBvcnQgKiBmcm9tICcuL3NyYy9zdG9yYWdlJztcclxuXHJcbmV4cG9ydCBjb25zdCBTVE9SQUdFID0gbmV3IEluamVjdGlvblRva2VuPFN0b3JhZ2U+KCdTVE9SQUdFJyk7XHJcblxyXG4vLyBmb3IgQW9UIGNvbXBpbGF0aW9uXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KCk6IENhY2hlTG9hZGVyIHtcclxuICByZXR1cm4gbmV3IENhY2hlU3RhdGljTG9hZGVyKCk7XHJcbn1cclxuXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVTZXJ2aWNlRmFjdG9yeShsb2FkZXI6IENhY2hlTG9hZGVyLCBwbGF0Zm9ybUlkOiBhbnksIGluamVjdG9yOiBJbmplY3Rvcik6IENhY2hlU2VydmljZSB7XHJcbiAgcmV0dXJuIG5ldyBDYWNoZVNlcnZpY2UobG9hZGVyLCBwbGF0Zm9ybUlkLCBpbmplY3Rvcik7XHJcbn1cclxuXHJcbkBOZ01vZHVsZSgpXHJcbmV4cG9ydCBjbGFzcyBDYWNoZU1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoXHJcbiAgICBjb25maWd1cmVkUHJvdmlkZXI6IGFueSA9IHtcclxuICAgICAgcHJvdmlkZTogQ2FjaGVMb2FkZXIsXHJcbiAgICAgIHVzZUZhY3Rvcnk6IGNhY2hlRmFjdG9yeVxyXG4gICAgfVxyXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IENhY2hlTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBjb25maWd1cmVkUHJvdmlkZXIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQ2FjaGVTZXJ2aWNlLFxyXG4gICAgICAgICAgdXNlRmFjdG9yeTogY2FjaGVTZXJ2aWNlRmFjdG9yeSxcclxuICAgICAgICAgIGRlcHM6IFtDYWNoZUxvYWRlciwgUExBVEZPUk1fSUQsIEluamVjdG9yXVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZT86IENhY2hlTW9kdWxlKSB7XHJcbiAgICBpZiAocGFyZW50TW9kdWxlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FjaGVNb2R1bGUgYWxyZWFkeSBsb2FkZWQ7IGltcG9ydCBpbiByb290IG1vZHVsZSBvbmx5LicpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=