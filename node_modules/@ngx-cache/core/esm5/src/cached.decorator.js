import { of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
import { CacheService } from './cache.service';
import { ReturnType } from './models/return-type';
import { isObservable, isPromise } from './util';
export function CacheKey(target, propertyKey, index) {
    var metadataKey = "__cache_" + propertyKey + "_keys";
    Array.isArray(target[metadataKey]) ? target[metadataKey].push(index) : (target[metadataKey] = [index]);
}
export function Cached(key) {
    return function (target, propertyKey, descriptor) {
        var method = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var cache = CacheService.getInstance();
            var metadataKey = "__cache_" + propertyKey + "_keys";
            var indices = target[metadataKey];
            var keyParts = '';
            if (Array.isArray(indices)) {
                for (var i = 0; i < args.length; i++) {
                    if (indices.indexOf(i) !== -1) {
                        keyParts = !keyParts ? String(args[i]) : keyParts + "_" + String(args[i]);
                    }
                }
            }
            var cacheKey = !keyParts ? key : key + "_" + keyParts;
            cacheKey = CacheService.normalizeKey(cacheKey);
            if (!cache || !cacheKey) {
                return method.apply(this, args);
            }
            if (cache.has(cacheKey)) {
                var cached = cache.getWithMetadata(cacheKey);
                if (cached && cached.data) {
                    switch (cached.returnType) {
                        case ReturnType.Observable:
                            return observableOf(cached.data);
                        case ReturnType.Promise:
                            return Promise.resolve(cached.data);
                        default:
                            return cached.data;
                    }
                }
            }
            var value = method.apply(this, args);
            if (isObservable(value)) {
                return value.pipe(map(function (res) {
                    cache.set(cacheKey, res, ReturnType.Observable);
                    return res;
                }));
            }
            else if (isPromise(value)) {
                return (value).then(function (res) {
                    cache.set(cacheKey, res, ReturnType.Promise);
                    return res;
                });
            }
            cache.set(cacheKey, value);
            return value;
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtY2FjaGUvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYWNoZWQuZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxFQUFFLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2pELE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBVyxFQUFFLFdBQW1CLEVBQUUsS0FBYTtJQUN0RSxJQUFNLFdBQVcsR0FBRyxhQUFXLFdBQVcsVUFBTyxDQUFDO0lBRWxELEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RyxDQUFDO0FBR0QsTUFBTSxVQUFVLE1BQU0sQ0FBQyxHQUFXO0lBRWhDLE9BQU8sVUFBUyxNQUFnQixFQUFFLFdBQW1CLEVBQUUsVUFBd0M7UUFDN0YsSUFBTSxNQUFNLEdBQWEsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUMxQyxVQUFVLENBQUMsS0FBSyxHQUFHO1lBQVMsY0FBbUI7aUJBQW5CLFVBQW1CLEVBQW5CLHFCQUFtQixFQUFuQixJQUFtQjtnQkFBbkIseUJBQW1COztZQUM3QyxJQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFekMsSUFBTSxXQUFXLEdBQUcsYUFBVyxXQUFXLFVBQU8sQ0FBQztZQUNsRCxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFcEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBRWxCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDN0IsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFJLFFBQVEsU0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFHLENBQUM7cUJBQzNFO2lCQUNGO2FBQ0Y7WUFFRCxJQUFJLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBSSxHQUFHLFNBQUksUUFBVSxDQUFDO1lBRXRELFFBQVEsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRy9DLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBRXZCLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDakM7WUFFRCxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3ZCLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRS9DLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7b0JBQ3pCLFFBQVEsTUFBTSxDQUFDLFVBQVUsRUFBRTt3QkFDekIsS0FBSyxVQUFVLENBQUMsVUFBVTs0QkFDeEIsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNuQyxLQUFLLFVBQVUsQ0FBQyxPQUFPOzRCQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN0Qzs0QkFDRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUM7cUJBQ3RCO2lCQUNGO2FBQ0Y7WUFHRCxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUV2QyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdkIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNmLEdBQUcsQ0FBQyxVQUFDLEdBQVE7b0JBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFFaEQsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDLENBQ0gsQ0FBQzthQUNIO2lCQUFNLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBUTtvQkFDM0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFFN0MsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTNCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSZXR1cm5UeXBlIH0gZnJvbSAnLi9tb2RlbHMvcmV0dXJuLXR5cGUnO1xyXG5pbXBvcnQgeyBpc09ic2VydmFibGUsIGlzUHJvbWlzZSB9IGZyb20gJy4vdXRpbCc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuZXhwb3J0IGZ1bmN0aW9uIENhY2hlS2V5KHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgY29uc3QgbWV0YWRhdGFLZXkgPSBgX19jYWNoZV8ke3Byb3BlcnR5S2V5fV9rZXlzYDtcclxuXHJcbiAgQXJyYXkuaXNBcnJheSh0YXJnZXRbbWV0YWRhdGFLZXldKSA/IHRhcmdldFttZXRhZGF0YUtleV0ucHVzaChpbmRleCkgOiAodGFyZ2V0W21ldGFkYXRhS2V5XSA9IFtpbmRleF0pO1xyXG59XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuZXhwb3J0IGZ1bmN0aW9uIENhY2hlZChrZXk6IHN0cmluZyk6IGFueSB8IE9ic2VydmFibGU8YW55PiB8IFByb21pc2U8YW55PiB7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogRnVuY3Rpb24sIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPGFueT4pOiBhbnkgfCBPYnNlcnZhYmxlPGFueT4gfCBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QgbWV0aG9kOiBGdW5jdGlvbiA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IGFueSB8IE9ic2VydmFibGU8YW55PiB8IFByb21pc2U8YW55PiB7XHJcbiAgICAgIGNvbnN0IGNhY2hlID0gQ2FjaGVTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBjb25zdCBtZXRhZGF0YUtleSA9IGBfX2NhY2hlXyR7cHJvcGVydHlLZXl9X2tleXNgO1xyXG4gICAgICBjb25zdCBpbmRpY2VzID0gdGFyZ2V0W21ldGFkYXRhS2V5XTtcclxuXHJcbiAgICAgIGxldCBrZXlQYXJ0cyA9ICcnO1xyXG5cclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5kaWNlcykpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmIChpbmRpY2VzLmluZGV4T2YoaSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGtleVBhcnRzID0gIWtleVBhcnRzID8gU3RyaW5nKGFyZ3NbaV0pIDogYCR7a2V5UGFydHN9XyR7U3RyaW5nKGFyZ3NbaV0pfWA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgY2FjaGVLZXkgPSAha2V5UGFydHMgPyBrZXkgOiBgJHtrZXl9XyR7a2V5UGFydHN9YDtcclxuXHJcbiAgICAgIGNhY2hlS2V5ID0gQ2FjaGVTZXJ2aWNlLm5vcm1hbGl6ZUtleShjYWNoZUtleSk7XHJcblxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgaWYgKCFjYWNoZSB8fCAhY2FjaGVLZXkpIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2FjaGUuaGFzKGNhY2hlS2V5KSkge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldFdpdGhNZXRhZGF0YShjYWNoZUtleSk7XHJcblxyXG4gICAgICAgIGlmIChjYWNoZWQgJiYgY2FjaGVkLmRhdGEpIHtcclxuICAgICAgICAgIHN3aXRjaCAoY2FjaGVkLnJldHVyblR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBSZXR1cm5UeXBlLk9ic2VydmFibGU6XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVPZihjYWNoZWQuZGF0YSk7XHJcbiAgICAgICAgICAgIGNhc2UgUmV0dXJuVHlwZS5Qcm9taXNlOlxyXG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FjaGVkLmRhdGEpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZWQuZGF0YTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICBjb25zdCB2YWx1ZSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHJcbiAgICAgIGlmIChpc09ic2VydmFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnBpcGUoXHJcbiAgICAgICAgICBtYXAoKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgcmVzLCBSZXR1cm5UeXBlLk9ic2VydmFibGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSkudGhlbigocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgcmVzLCBSZXR1cm5UeXBlLlByb21pc2UpO1xyXG5cclxuICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgdmFsdWUpO1xyXG5cclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcclxuICB9O1xyXG59XHJcbiJdfQ==