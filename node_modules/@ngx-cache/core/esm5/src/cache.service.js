import { Inject, Injectable, InjectionToken, Injector, PLATFORM_ID } from '@angular/core';
import { CacheLoader } from './cache.loader';
import { ReturnType } from './models/return-type';
export var CACHE = new InjectionToken('CACHE');
var CacheService = (function () {
    function CacheService(loader, platformId, injector) {
        this.loader = loader;
        this.platformId = platformId;
        this.injector = injector;
        CacheService.instance = this;
        this.cache = this.injector.get(CACHE);
        this.lifeSpan = loader.lifeSpan;
    }
    CacheService.getInstance = function (loader, platformId, injector) {
        return CacheService.instance;
    };
    CacheService.normalizeKey = function (key) {
        if (CacheService.validateKey(key)) {
            throw new Error('Please provide a valid key to save in the CacheService');
        }
        return "" + key;
    };
    CacheService.validateKey = function (key) {
        return !key || typeof key === 'boolean' || Number.isNaN(key);
    };
    CacheService.validateValue = function (value) {
        return value.lifeSpan.expiry && value.lifeSpan.expiry > Date.now();
    };
    Object.defineProperty(CacheService.prototype, "key", {
        get: function () {
            return this.loader.key;
        },
        enumerable: true,
        configurable: true
    });
    CacheService.prototype.has = function (key) {
        var normalized = CacheService.normalizeKey(key);
        return this.cache.keys.indexOf(normalized) !== -1;
    };
    CacheService.prototype.set = function (key, value, returnType, lifeSpan) {
        if (returnType === void 0) { returnType = ReturnType.Scalar; }
        var normalized = CacheService.normalizeKey(key);
        return this.cache.setItem(normalized, {
            data: value,
            returnType: returnType,
            lifeSpan: this.parseLifeSpan(lifeSpan ? lifeSpan : this.lifeSpan)
        });
    };
    CacheService.prototype.get = function (key) {
        var normalized = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(normalized);
        if (cached) {
            if (CacheService.validateValue(cached)) {
                return cached.data;
            }
            else {
                this.remove(normalized);
            }
        }
        return undefined;
    };
    CacheService.prototype.getWithMetadata = function (key) {
        var normalized = CacheService.normalizeKey(key);
        var cached = this.cache.getItem(normalized);
        if (cached) {
            if (CacheService.validateValue(cached)) {
                return cached;
            }
            else {
                this.remove(key);
            }
        }
        return undefined;
    };
    CacheService.prototype.remove = function (key, wild) {
        if (wild === void 0) { wild = false; }
        var normalized = CacheService.normalizeKey(key);
        this.cache.removeItem(normalized, wild);
    };
    CacheService.prototype.clear = function () {
        this.cache.clear();
    };
    CacheService.prototype.dehydrate = function () {
        var _this = this;
        var keys = this.cache.keys.length ? this.cache.keys : [];
        var res = {};
        keys.forEach(function (key) {
            res[key] = _this.cache.getItem(key);
        });
        return res;
    };
    CacheService.prototype.rehydrate = function (json) {
        var _this = this;
        Object.keys(json).forEach(function (key) {
            var normalized = CacheService.normalizeKey(key);
            _this.cache.setItem(normalized, json[normalized]);
        });
    };
    CacheService.prototype.parseLifeSpan = function (lifeSpan) {
        return {
            expiry: lifeSpan.expiry || (lifeSpan.TTL ? Date.now() + lifeSpan.TTL * 1000 : this.lifeSpan.expiry),
            TTL: lifeSpan.TTL || this.lifeSpan.TTL
        };
    };
    CacheService.instance = undefined;
    CacheService.decorators = [
        { type: Injectable }
    ];
    CacheService.ctorParameters = function () { return [
        { type: CacheLoader },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Injector }
    ]; };
    return CacheService;
}());
export { CacheService };
//# sourceMappingURL=data:application/json;base64,