import { InjectionToken, Injector, NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CacheLoader, CacheStaticLoader } from './src/cache.loader';
import { CacheService } from './src/cache.service';
export * from './src/cache';
export * from './src/cache.loader';
export * from './src/cache.service';
export * from './src/cached.decorator';
export * from './src/storage';
export var STORAGE = new InjectionToken('STORAGE');
export function cacheFactory() {
    return new CacheStaticLoader();
}
export function cacheServiceFactory(loader, platformId, injector) {
    return new CacheService(loader, platformId, injector);
}
var CacheModule = (function () {
    function CacheModule(parentModule) {
        if (parentModule) {
            throw new Error('CacheModule already loaded; import in root module only.');
        }
    }
    CacheModule.forRoot = function (configuredProvider) {
        if (configuredProvider === void 0) { configuredProvider = {
            provide: CacheLoader,
            useFactory: cacheFactory
        }; }
        return {
            ngModule: CacheModule,
            providers: [
                configuredProvider,
                {
                    provide: CacheService,
                    useFactory: cacheServiceFactory,
                    deps: [CacheLoader, PLATFORM_ID, Injector]
                }
            ]
        };
    };
    CacheModule.decorators = [
        { type: NgModule }
    ];
    CacheModule.ctorParameters = function () { return [
        { type: CacheModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return CacheModule;
}());
export { CacheModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWNhY2hlL2NvcmUvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpILE9BQU8sRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNbkQsY0FBYyxhQUFhLENBQUM7QUFDNUIsY0FBYyxvQkFBb0IsQ0FBQztBQUNuQyxjQUFjLHFCQUFxQixDQUFDO0FBQ3BDLGNBQWMsd0JBQXdCLENBQUM7QUFDdkMsY0FBYyxlQUFlLENBQUM7QUFFOUIsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLElBQUksY0FBYyxDQUFVLFNBQVMsQ0FBQyxDQUFDO0FBSTlELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFHRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsTUFBbUIsRUFBRSxVQUFlLEVBQUUsUUFBa0I7SUFDMUYsT0FBTyxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRDtJQXFCRSxxQkFBb0MsWUFBMEI7UUFDNUQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQztJQXZCTSxtQkFBTyxHQUFkLFVBQ0Usa0JBR0M7UUFIRCxtQ0FBQSxFQUFBO1lBQ0UsT0FBTyxFQUFFLFdBQVc7WUFDcEIsVUFBVSxFQUFFLFlBQVk7U0FDekI7UUFFRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFO2dCQUNULGtCQUFrQjtnQkFDbEI7b0JBQ0UsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLFVBQVUsRUFBRSxtQkFBbUI7b0JBQy9CLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDO2lCQUMzQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQW5CRixRQUFROzs7Z0JBcUI0QyxXQUFXLHVCQUFqRCxRQUFRLFlBQUksUUFBUTs7SUFLbkMsa0JBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQXpCWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lELCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQ2FjaGVMb2FkZXIsIENhY2hlU3RhdGljTG9hZGVyIH0gZnJvbSAnLi9zcmMvY2FjaGUubG9hZGVyJztcclxuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9zcmMvY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JhZ2UgfSBmcm9tICcuL3NyYy9zdG9yYWdlJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL21vZGVscy9jYWNoZS1zZXR0aW5ncyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL21vZGVscy9jYWNoZS12YWx1ZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL21vZGVscy9saWZlLXNwYW4nO1xyXG5leHBvcnQgKiBmcm9tICcuL3NyYy9jYWNoZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NhY2hlLmxvYWRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NhY2hlLnNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL3NyYy9jYWNoZWQuZGVjb3JhdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9zcmMvc3RvcmFnZSc7XHJcblxyXG5leHBvcnQgY29uc3QgU1RPUkFHRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTdG9yYWdlPignU1RPUkFHRScpO1xyXG5cclxuLy8gZm9yIEFvVCBjb21waWxhdGlvblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlRmFjdG9yeSgpOiBDYWNoZUxvYWRlciB7XHJcbiAgcmV0dXJuIG5ldyBDYWNoZVN0YXRpY0xvYWRlcigpO1xyXG59XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlU2VydmljZUZhY3RvcnkobG9hZGVyOiBDYWNoZUxvYWRlciwgcGxhdGZvcm1JZDogYW55LCBpbmplY3RvcjogSW5qZWN0b3IpOiBDYWNoZVNlcnZpY2Uge1xyXG4gIHJldHVybiBuZXcgQ2FjaGVTZXJ2aWNlKGxvYWRlciwgcGxhdGZvcm1JZCwgaW5qZWN0b3IpO1xyXG59XHJcblxyXG5ATmdNb2R1bGUoKVxyXG5leHBvcnQgY2xhc3MgQ2FjaGVNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KFxyXG4gICAgY29uZmlndXJlZFByb3ZpZGVyOiBhbnkgPSB7XHJcbiAgICAgIHByb3ZpZGU6IENhY2hlTG9hZGVyLFxyXG4gICAgICB1c2VGYWN0b3J5OiBjYWNoZUZhY3RvcnlcclxuICAgIH1cclxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBDYWNoZU1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgY29uZmlndXJlZFByb3ZpZGVyLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IENhY2hlU2VydmljZSxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGNhY2hlU2VydmljZUZhY3RvcnksXHJcbiAgICAgICAgICBkZXBzOiBbQ2FjaGVMb2FkZXIsIFBMQVRGT1JNX0lELCBJbmplY3Rvcl1cclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU/OiBDYWNoZU1vZHVsZSkge1xyXG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhY2hlTW9kdWxlIGFscmVhZHkgbG9hZGVkOyBpbXBvcnQgaW4gcm9vdCBtb2R1bGUgb25seS4nKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19